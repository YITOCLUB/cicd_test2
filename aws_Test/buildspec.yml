version: 0.2
## aws_cicd CodePipelineとCodeBuildのCI/CDでGitHubからECSへデプロイする
## https://zoo200.net/deploy-ecs-with-cicd-codepipeline-codebuild/#toc12


env:
  variables:
    # 本来であれば、外部から取得する
    JOBMODE: "test" # mode0:調査, mode1:本番

phases:

  install:
    runtime-versions:
      ####docker: 18
      ###https://github.com/aws/aws-codebuild-docker-images/issues/531
      docker: 20

  pre_build:
    commands:
      - echo "●●●【$JOBMODE--pre_build】　Dockerイメージのビルド前ーーーーーーーーーーーーーー"
      - echo 00000YITO Logging in to Amazon ECR...

      # 環境変数の設定

      - ECR_URI=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
      - REPOSITORY_URI=$ECR_URI/$IMAGE_REPO_NAME
      - CONTAINER_NAME=container-test001-20221125
       # コミットハッシュの先頭7桁をタグに利用する
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH:=latest}
      - echo "　　●●IMAGE_TAG :" ${IMAGE_TAG}
      ##05
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_URI


  build:
    commands:
        - echo "●●●【$JOBMODE--build】　DockerイメージのビルドーーーーーーーーーーIMAGE_REPO_NAME：" $IMAGE_REPO_NAME  
        - echo Build started on `date`
        - echo "　　★★ls -l yml :" `ls -l ./docker-compose_aws.yml`
        - echo "　　★★docker -v :" `docker -v`
        - echo "　　★★docker-compose -v :" `docker-compose -v`
        - echo "　　★★ls -l:" `ls -l ./TestA.Tests`
        - echo "　　★★dot¥nnet --version:" `dotnet --version`

        - echo "　　★★dotnet --list-sdks" 
        - dotnet --list-sdks


        - echo "　　★★dotnet test" 
        - dotnet test ./TestA.Tests/TestA.Tests.csproj --logger trx --results-directory ./utestresults  --collect:"XPlat Code Coverage" 


        - echo "　　★★ls -l ./utestresults" 
        - ls -l ./utestresults

        - echo "　　★★ls -l ./utestresults/*/coverage.cobertura.xml" 
        - ls -l ./utestresults/*/coverage.cobertura.xml
                        
        - docker-compose -f ./docker-compose_aws.yml build --no-cache
        - echo "　　★★docker images :" `docker images`

        - docker tag $IMAGE_REPO_NAME:latest $REPOSITORY_URI:latest
        - docker tag $IMAGE_REPO_NAME:latest $REPOSITORY_URI:$IMAGE_TAG
      
        - echo "　　★★docker images :" `docker images`

  post_build:
    commands:
        - echo "●●●【$JOBMODE--post_build】　Dockerイメージのビルド後ーーーーーーーーーーーーーー"   
        - echo Build completed on `date`
        - echo Pushing the Docker image...
        - echo "　　★★ls -l:" `ls .`
        
        - docker push $REPOSITORY_URI
        - docker push $REPOSITORY_URI:$IMAGE_TAG

        - echo Writing image definitions file...
        - printf '[{"name":"%s","imageUri":"%s"}]' $CONTAINER_NAME $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json

        - echo "　　★★ls -l imagedefinitions.json :" `ls -l ./imagedefinitions.json`
      
artifacts:
    files: imagedefinitions.json
reports:
    XUnitTestResults:
        file-format: VisualStudioTrx
        files:
            - '*.trx'
        base-directory: './utestresults'

    CoberturaResults:
        file-format: COBERTURAXML
        base-directory: './utestresults'
        files:
            - '*/*.xml'
